{
  "info": {
    "name": "JSONPlaceholder - Posts",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Create Valid Post",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"title\": \"foo\",\n  \"body\": \"bar\",\n  \"userId\": 1\n}"
        },
        "url": {
          "raw": "https://jsonplaceholder.typicode.com/posts",
          "protocol": "https",
          "host": [
            "jsonplaceholder",
            "typicode",
            "com"
          ],
          "path": [
            "posts"
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 201\", function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "pm.test(\"Response has correct title\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.title).to.eql(\"foo\");",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Get Post with ID 1",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "https://jsonplaceholder.typicode.com/posts/1",
          "protocol": "https",
          "host": [
            "jsonplaceholder",
            "typicode",
            "com"
          ],
          "path": [
            "posts",
            "1"
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "pm.test(\"Response contains correct ID\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.id).to.eql(1);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Update Post (PUT /posts/1)",
      "request": {
        "method": "PUT",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"id\": 1,\n  \"title\": \"Updated Title\",\n  \"body\": \"Updated body text\",\n  \"userId\": 1\n}"
        },
        "url": {
          "raw": "https://jsonplaceholder.typicode.com/posts/1",
          "host": [
            "https://jsonplaceholder.typicode.com"
          ],
          "path": [
            "posts",
            "1"
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "pm.test(\"Response contains updated title\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.title).to.eql(\"Updated Title\");",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Delete Post (DELETE /posts/1)",
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "https://jsonplaceholder.typicode.com/posts/1",
          "host": [
            "https://jsonplaceholder.typicode.com"
          ],
          "path": [
            "posts",
            "1"
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200 or 204\", function () {",
              "    pm.expect([200, 204]).to.include(pm.response.code);",
              "});",
              "pm.test(\"Response body is empty or {}\", function () {",
              "    try {",
              "        var jsonData = pm.response.json();",
              "        pm.expect(jsonData).to.eql({});",
              "    } catch (e) {",
              "        pm.expect(pm.response.text()).to.eql(\"\");",
              "    }",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    }
  ]
}